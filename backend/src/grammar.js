/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[1,18],$V3=[1,17],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[6,8,11,21,33,34,35,36],$V8=[1,28],$V9=[1,29],$Va=[1,40],$Vb=[1,47],$Vc=[1,39],$Vd=[1,38],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[25,28,30],$Vl=[15,25,28,54,55,62,63,64,65,66,67,68,69,70,71,72,73],$Vm=[15,28],$Vn=[1,70],$Vo=[1,71],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[2,6,8,11,14,21,33,34,35,36,45,46,47,49,51,52,53,56,63,74,75,76,77,78,79,80],$VC=[1,101],$VD=[1,103],$VE=[15,25,28,62,63,66,67,68,69,70,71,72,73],$VF=[15,25,28,62,63,64,65,66,67,68,69,70,71,72,73],$VG=[15,25,28,66,67,68,69,70,71,72,73],$VH=[15,25,28,67,68,72,73],$VI=[1,123],$VJ=[1,118],$VK=[1,119],$VL=[1,120],$VM=[1,124],$VN=[1,126],$VO=[1,127],$VP=[1,125],$VQ=[1,128],$VR=[2,6,8,11,21,33,34,35,36,45,46,47,49,50,51,52,53,56],$VS=[8,11,21,33,34,35,36,45,46,47,49,51,52,53,56],$VT=[1,136],$VU=[2,8,11,21,33,34,35,36,45,46,47,49,51,52,53,56],$VV=[1,142],$VW=[1,143],$VX=[2,8,11,15,21,33,34,35,36,45,46,47,49,51,52,53,56],$VY=[1,179];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"DEFINICION_CLASE":4,"EOF":5,"RES_PUBLIC":6,"RES_CLASS":7,"ID":8,"{":9,"INSTRUCCIONES_CLASE":10,"}":11,"INSTRUCCION_CLASE":12,"RES_VOID":13,"(":14,")":15,"BLOQUE_INSTRUCCIONES":16,"LISTA_PARAM":17,"TIPO":18,"RES_STATIC":19,"RES_MAIN":20,"RES_STRING":21,"[":22,"]":23,"LLAMADA_FUNCION":24,";":25,"DECLARACION":26,"ASIGNACION":27,",":28,"PARAMETRO":29,"=":30,"EXPRESION":31,"LISTA_ID":32,"RES_INT":33,"RES_CHAR":34,"RES_DOUBLE":35,"RES_BOOLEAN":36,"INSTRUCCIONES":37,"INSTRUCCION":38,"ERROR_INSTRUCCIONES":39,"IF":40,"FOR":41,"WHILE":42,"DO":43,"PRINT":44,"RES_CONTINUE":45,"RES_BREAK":46,"RES_RETURN":47,"INCR_DECR":48,"RES_IF":49,"RES_ELSE":50,"RES_WHILE":51,"RES_DO":52,"RES_FOR":53,"++":54,"--":55,"RES_SYSTEM":56,".":57,"RES_OUT":58,"RES_PRINT":59,"RES_PRINTLN":60,"LISTA_EXPR":61,"+":62,"-":63,"*":64,"/":65,"<=":66,"==":67,"!=":68,">":69,">=":70,"<":71,"&&":72,"||":73,"!":74,"NUMERO":75,"DECIMAL":76,"CADENA_TEXTO":77,"CHAR":78,"RES_TRUE":79,"RES_FALSE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"RES_PUBLIC",7:"RES_CLASS",8:"ID",9:"{",11:"}",13:"RES_VOID",14:"(",15:")",19:"RES_STATIC",20:"RES_MAIN",21:"RES_STRING",22:"[",23:"]",25:";",28:",",30:"=",33:"RES_INT",34:"RES_CHAR",35:"RES_DOUBLE",36:"RES_BOOLEAN",45:"RES_CONTINUE",46:"RES_BREAK",47:"RES_RETURN",49:"RES_IF",50:"RES_ELSE",51:"RES_WHILE",52:"RES_DO",53:"RES_FOR",54:"++",55:"--",56:"RES_SYSTEM",57:".",58:"RES_OUT",59:"RES_PRINT",60:"RES_PRINTLN",62:"+",63:"-",64:"*",65:"/",66:"<=",67:"==",68:"!=",69:">",70:">=",71:"<",72:"&&",73:"||",74:"!",75:"NUMERO",76:"DECIMAL",77:"CADENA_TEXTO",78:"CHAR",79:"RES_TRUE",80:"RES_FALSE"},
productions_: [0,[3,2],[4,6],[4,5],[10,2],[10,1],[12,6],[12,7],[12,6],[12,7],[12,11],[12,2],[12,1],[12,1],[17,3],[17,1],[29,2],[27,4],[26,3],[26,5],[32,3],[32,1],[18,1],[18,1],[18,1],[18,1],[18,1],[16,3],[16,2],[37,2],[37,1],[37,4],[37,3],[39,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,2],[38,2],[38,2],[38,3],[38,2],[38,1],[40,5],[40,7],[40,7],[42,5],[43,7],[41,8],[41,8],[48,2],[48,2],[44,9],[44,9],[24,3],[24,4],[61,3],[61,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$=API.nuevaClase($$[$0-3],$$[$0-1]);
break;
case 3:
this.$=API.nuevaClase($$[$0-2],[]);
break;
case 4: case 29:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 5: case 15: case 21: case 30: case 61:
this.$=[$$[$0]];
break;
case 6:
this.$=API.nuevoVoid($$[$0-4],$$[$0-1]);
break;
case 7:
this.$=API.nuevoVoidParametrizado($$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 8:
this.$=API.nuevoMetodo($$[$0-5],$$[$0-4],$$[$0-1]);
break;
case 9:
this.$=API.nuevoMetodoParametrizado($$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 10:
this.$=API.nuevoMain($$[$0-2],$$[$0]);
break;
case 12: case 13: case 22: case 23: case 24: case 25: case 26: case 34: case 35: case 36: case 37: case 38: case 39: case 40:
this.$=$$[$0];
break;
case 14: case 20: case 60:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 16:
this.$=API.nuevoParametro($$[$0-1],$$[$0]);
break;
case 17:
this.$=API.nuevaAsignacion($$[$0-3],$$[$0-1]);
break;
case 18:
this.$=API.nuevaDeclaracion($$[$0-2],$$[$0-1]);
break;
case 19:
this.$=API.nuevaDeclaracionExp($$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 27: case 45:
this.$=$$[$0-1];
break;
case 28:
this.$=[];
break;
case 31:
$$[$0-3].push($$[$0-2]);this.$=$$[$0-3];
break;
case 32:
this.$=[$$[$0-2]];
break;
case 33:

    if($$[$0]!=';' && !modoPanico){
			let row = this._$.first_line;
			let column = this._$.first_column + 1;
			let newError = "<td><center>" + contador.toString() + "</center></td>\n" +
                "<td><center>Sintáctico</center></td>\n" +
                "<td><center>" + row + "</center></td>\n" +
                "<td><center>" + column + "</center></td>\n" +
                "<td><center>Se esperaba el inicio de una instrucción valida pero se obtuvo \"" + $$[$0] + "\" </center></td>\n" +
                "</tr>\n" +
                "</center>\n";
			contador+=1;
			errores.push(newError);
			console.log('Este es un error sintactico: ' + $$[$0] + '. En la linea: '+ this._$.first_line + ', columna: '+this._$.first_column);
			modoPanico = true;
        }
		else if($$[$0]==';'){
			modoPanico = false;
		}

break;
case 41:
this.$=API.nuevoContinue(this._$first_line,this.$first_column+1);
break;
case 42:
this.$=API.nuevoBreak(this._$first_line,this.$first_column+1);
break;
case 43:
this.$=API.nuevoReturn(null,this._$first_line,this.$first_column+1);
break;
case 44:
this.$=API.nuevoContinue($$[$0-1],this._$first_line,this.$first_column+1);
break;
case 47:
this.$=API.nuevoIf($$[$0-2],$$[$0],[]);
break;
case 48:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],$$[$0]);
break;
case 49:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],[$$[$0]]);
break;
case 50:
this.$=API.nuevoWhile($$[$0-2],$$[$0]);
break;
case 51:
this.$=API.nuevoDoWhile($$[$0-5],$$[$0-2]);
break;
case 52: case 53:
this.$=API.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 54:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.INCREMENTO);
break;
case 55:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.DECREMENTO);
break;
case 56:
 this.$ = API.nuevoPrint($$[$0-2]); 
break;
case 57:
 this.$ = API.nuevoPrintLn($$[$0-2]); 
break;
case 58:
this.$=API.nuevaLlamadaFuncion($$[$0-2],[]);
break;
case 59:
this.$=API.nuevaLlamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 62:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 63:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 64:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION);
break;
case 65:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION);
break;
case 66:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 67:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 68:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 69:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 70:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 71:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 72:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 73:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 74:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 75:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 76:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 77:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 78:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 79:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.NUMERO); 
break;
case 80:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.DECIMAL); 
break;
case 81:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.STRING); 
break;
case 82:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.CHAR); 
break;
case 83:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 84:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 85:
 this.$ = $$[$0-1]; 
break;
case 86:
 this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:[1,5]},{1:[2,1]},{8:[1,6]},{9:[1,7]},{6:$V0,8:$V1,10:8,11:[1,9],12:10,18:16,21:$V2,24:12,26:13,27:14,33:$V3,34:$V4,35:$V5,36:$V6},{6:$V0,8:$V1,11:[1,22],12:23,18:16,21:$V2,24:12,26:13,27:14,33:$V3,34:$V4,35:$V5,36:$V6},{5:[2,3]},o($V7,[2,5]),{13:[1,24],18:25,19:[1,26],21:$V2,33:$V3,34:$V4,35:$V5,36:$V6},{25:[1,27]},o($V7,[2,12]),o($V7,[2,13]),{14:$V8,30:$V9},{8:[1,31],32:30},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},{5:[2,2]},o($V7,[2,4]),{8:[1,32]},{8:[1,33]},{13:[1,34]},o($V7,[2,11]),{8:$Va,14:$Vb,15:[1,35],24:48,31:37,61:36,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:49,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{25:[1,50],28:[1,52],30:[1,51]},o($Vk,[2,21]),{14:[1,53]},{14:[1,54]},{20:[1,55]},o($Vl,[2,58]),{15:[1,56],28:[1,57]},o($Vm,[2,61],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),{8:$Va,14:$Vb,24:48,31:72,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:73,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},o($Vl,[2,78],{14:$V8}),o($Vl,[2,79]),o($Vl,[2,80]),o($Vl,[2,81]),o($Vl,[2,82]),o($Vl,[2,83]),o($Vl,[2,84]),{8:$Va,14:$Vb,24:48,31:74,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},o($Vl,[2,86]),{25:[1,75],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},o($VB,[2,18]),{8:$Va,14:$Vb,24:48,31:76,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:[1,77]},{15:[1,78],17:79,18:81,21:$V2,29:80,33:$V3,34:$V4,35:$V5,36:$V6},{15:[1,82],17:83,18:81,21:$V2,29:80,33:$V3,34:$V4,35:$V5,36:$V6},{14:[1,84]},o($Vl,[2,59]),{8:$Va,14:$Vb,24:48,31:85,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:86,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:87,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:88,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:89,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:90,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:91,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:92,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:93,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:94,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:95,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:96,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:97,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},o($Vl,[2,74]),o($Vl,[2,75]),o($Vl,[2,76]),o($Vl,[2,77]),{15:[1,98],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},o($VB,[2,17]),{25:[1,99],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},o($Vk,[2,20]),{9:$VC,16:100},{15:[1,102],28:$VD},o($Vm,[2,15]),{8:[1,104]},{9:$VC,16:105},{15:[1,106],28:$VD},{21:[1,107]},o($Vm,[2,60],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA}),o($VE,[2,62],{54:$Vn,55:$Vo,64:$Vr,65:$Vs}),o($VE,[2,63],{54:$Vn,55:$Vo,64:$Vr,65:$Vs}),o($VF,[2,64],{54:$Vn,55:$Vo}),o($VF,[2,65],{54:$Vn,55:$Vo}),o($VG,[2,66],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs}),o($VH,[2,67],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,69:$Vw,70:$Vx,71:$Vy}),o($VH,[2,68],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,69:$Vw,70:$Vx,71:$Vy}),o($VG,[2,69],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs}),o($VG,[2,70],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs}),o($VG,[2,71],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs}),o([15,25,28,72,73],[2,72],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy}),o([15,25,28,73],[2,73],{54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz}),o($Vl,[2,85]),o($VB,[2,19]),o($V7,[2,6]),{8:$VI,11:[1,109],18:16,21:$V2,24:121,26:111,27:112,33:$V3,34:$V4,35:$V5,36:$V6,37:108,38:110,40:113,41:114,42:115,43:116,44:117,45:$VJ,46:$VK,47:$VL,48:122,49:$VM,51:$VN,52:$VO,53:$VP,56:$VQ},{9:$VC,16:129},{18:81,21:$V2,29:130,33:$V3,34:$V4,35:$V5,36:$V6},o($Vm,[2,16]),o($V7,[2,8]),{9:$VC,16:131},{22:[1,132]},{8:$VI,11:[1,133],18:16,21:$V2,24:121,26:111,27:112,33:$V3,34:$V4,35:$V5,36:$V6,38:134,40:113,41:114,42:115,43:116,44:117,45:$VJ,46:$VK,47:$VL,48:122,49:$VM,51:$VN,52:$VO,53:$VP,56:$VQ},o($VR,[2,28]),o($VS,[2,30],{39:135,2:$VT}),o($VU,[2,34]),o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),{25:[1,137]},{25:[1,138]},{8:$Va,14:$Vb,24:48,25:[1,139],31:140,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{25:[1,141]},o($VU,[2,46]),{14:$V8,30:$V9,54:$VV,55:$VW},{14:[1,144]},{14:[1,145]},{14:[1,146]},{9:$VC,16:147},{57:[1,148]},o($V7,[2,7]),o($Vm,[2,14]),o($V7,[2,9]),{23:[1,149]},o($VR,[2,27]),o($VS,[2,29],{39:150,2:$VT}),{25:[1,151]},{25:[2,33]},o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),{25:[1,152],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},o($VU,[2,45]),o($VX,[2,54]),o($VX,[2,55]),{8:$Va,14:$Vb,24:48,31:153,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:[1,156],18:16,21:$V2,26:154,27:155,33:$V3,34:$V4,35:$V5,36:$V6},{8:$Va,14:$Vb,24:48,31:157,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{51:[1,158]},{58:[1,159]},{8:[1,160]},{25:[1,161]},o($VS,[2,32]),o($VU,[2,44]),{15:[1,162],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{8:$Va,14:$Vb,24:48,31:163,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:164,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{30:$V9},{15:[1,165],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{14:[1,166]},{57:[1,167]},{15:[1,168]},o($VS,[2,31]),{9:$VC,16:169},{25:[1,170],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{25:[1,171],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{9:$VC,16:172},{8:$Va,14:$Vb,24:48,31:173,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{59:[1,174],60:[1,175]},{9:$VC,16:176},o($VU,[2,47],{50:[1,177]}),{8:$VY,48:178},{8:$VY,48:180},o($VU,[2,50]),{15:[1,181],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{14:[1,182]},{14:[1,183]},o($V7,[2,10]),{9:$VC,16:184,40:185,49:$VM},{15:[1,186]},{54:$VV,55:$VW},{15:[1,187]},{25:[1,188]},{8:$Va,14:$Vb,24:48,31:189,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},{8:$Va,14:$Vb,24:48,31:190,63:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj},o($VU,[2,48]),o($VU,[2,49]),{9:$VC,16:191},{9:$VC,16:192},o($VU,[2,51]),{15:[1,193],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},{15:[1,194],54:$Vn,55:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA},o($VU,[2,52]),o($VU,[2,53]),{25:[1,195]},{25:[1,196]},o($VU,[2,56]),o($VU,[2,57])],
defaultActions: {4:[2,1],9:[2,3],17:[2,22],18:[2,23],19:[2,24],20:[2,25],21:[2,26],22:[2,2],136:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let modoPanico = false,
    contador = 1,
    errores = new Array();
module.exports.errores = errores;

const TIPO_OPERACION=require('./instructions').TIPO_OPERACION;
const TIPO_VALOR=require('./instructions').TIPO_VALOR;
const API=require('./instructions').INSTRUCCIONES_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR COMENTARIOS */
break;
case 1:/* IGNORAR COMENTARIOS */
break;
case 2:// IGNORAR ESPACIOS EN BLANCO
break;
case 3:return 6;
break;
case 4:return 7;
break;
case 5:return 'RES_INTERFACE';
break;
case 6:return 33;
break;
case 7:return 36;
break;
case 8:return 35;
break;
case 9:return 21;
break;
case 10:return 34;
break;
case 11:return 79;
break;
case 12:return 80;
break;
case 13:return 19;
break;
case 14:return 13;
break;
case 15:return 20;
break;
case 16:return 53;
break;
case 17:return 51;
break;
case 18:return 56;
break;
case 19:return 58;
break;
case 20:return 60;
break;
case 21:return 59;
break;
case 22:return 52;
break;
case 23:return 49;
break;
case 24:return 50;
break;
case 25:return 46;
break;
case 26:return 45;
break;
case 27:return 47;
break;
case 28:return 'RES_AND';
break;
case 29:return 'RES_OR';
break;
case 30:return 'RES_NOT';
break;
case 31:return 'RES_XOR'
break;
case 32:return 70;
break;
case 33:return 66;
break;
case 34:return 69;
break;
case 35:return 71;
break;
case 36:return 67;
break;
case 37:return 68;
break;
case 38:return 57;
break;
case 39:return 25;
break;
case 40:return 28;
break;
case 41:return 14;
break;
case 42:return 15;
break;
case 43:return 22;
break;
case 44:return 23;
break;
case 45:return 9;
break;
case 46:return 11;
break;
case 47:return 54;
break;
case 48:return 55;
break;
case 49:return 62;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 65;
break;
case 53:return 30;
break;
case 54:return 76;
break;
case 55:return 75;
break;
case 56:return 8;
break;
case 57:return 78;
break;
case 58:return 77;
break;
case 59:return 5;
break;
case 60:
    let fila=yy_.yylloc.first_line;
    let columna=yy_.yylloc.first_column+1;
    let nuevoError= "<td><center>" + contador.toString() + "</center></td>\n" +
                "<td><center>Léxico</center></td>\n" +
                "<td><center>" + fila + "</center></td>\n" +
                "<td><center>" + columna + "</center></td>\n" +
                "<td><center>El caracter \"" + yy_.yytext + "\" no pertenece al lenguaje</center></td>\n" +
                "</tr>\n" +
                "</center>\n";
	contador+=1;
	errores.push(nuevoError);
	console.log('Error lexico: \'' + yy_.yytext + '\'. En fila: ' + fila + ', columna: ' + columna + '.');

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\s+)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:(([0-9]+)(\.([0-9]+))))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:((\.)))/,/^(?:(("[^"]*")))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}