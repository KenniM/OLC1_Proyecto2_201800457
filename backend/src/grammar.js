/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,21],$V4=[1,17],$V5=[1,22],$V6=[1,25],$V7=[1,24],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,33],$Vc=[1,32],$Vd=[2,7,9,12,26,37,38,39,40],$Ve=[1,40],$Vf=[1,41],$Vg=[2,7,12],$Vh=[1,65],$Vi=[1,56],$Vj=[1,63],$Vk=[1,55],$Vl=[1,54],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[19,32,34],$Vt=[18,19,32,58,59,66,67,68,69,70,71,72,73,74,75,76,77],$Vu=[18,32],$Vv=[1,89],$Vw=[1,90],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[2,7,9,12,17,26,37,38,39,40,49,50,51,53,55,56,57,60,67,78,79,80,81,82,83,84],$VK=[1,126],$VL=[1,128],$VM=[18,19,32,66,67,70,71,72,73,74,75,76,77],$VN=[18,19,32,66,67,68,69,70,71,72,73,74,75,76,77],$VO=[18,19,32,70,71,72,73,74,75,76,77],$VP=[18,19,32,71,72,76,77],$VQ=[1,152],$VR=[1,147],$VS=[1,148],$VT=[1,149],$VU=[1,153],$VV=[1,155],$VW=[1,156],$VX=[1,154],$VY=[1,157],$VZ=[2,7,9,12,26,37,38,39,40,49,50,51,53,54,55,56,57,60],$V_=[9,12,26,37,38,39,40,49,50,51,53,55,56,57,60],$V$=[1,167],$V01=[2,9,12,26,37,38,39,40,49,50,51,53,55,56,57,60],$V11=[1,173],$V21=[1,174],$V31=[2,9,12,18,26,37,38,39,40,49,50,51,53,55,56,57,60],$V41=[1,210];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SET_INSTRUCCIONES":4,"EOF":5,"DEFINICION_CLASE":6,"RES_PUBLIC":7,"RES_CLASS":8,"ID":9,"{":10,"INSTRUCCIONES_CLASE":11,"}":12,"RES_INTERFACE":13,"DEFINICIONES_INTERFAZ":14,"DEFINICION_INTERFAZ":15,"RES_VOID":16,"(":17,")":18,";":19,"LISTA_PARAM":20,"TIPO":21,"INSTRUCCION_CLASE":22,"BLOQUE_INSTRUCCIONES":23,"RES_STATIC":24,"RES_MAIN":25,"RES_STRING":26,"[":27,"]":28,"LLAMADA_FUNCION":29,"DECLARACION":30,"ASIGNACION":31,",":32,"PARAMETRO":33,"=":34,"EXPRESION":35,"LISTA_ID":36,"RES_INT":37,"RES_CHAR":38,"RES_DOUBLE":39,"RES_BOOLEAN":40,"INSTRUCCIONES":41,"INSTRUCCION":42,"ERROR_INSTRUCCIONES":43,"IF":44,"FOR":45,"WHILE":46,"DO":47,"PRINT":48,"RES_CONTINUE":49,"RES_BREAK":50,"RES_RETURN":51,"INCR_DECR":52,"RES_IF":53,"RES_ELSE":54,"RES_WHILE":55,"RES_DO":56,"RES_FOR":57,"++":58,"--":59,"RES_SYSTEM":60,".":61,"RES_OUT":62,"RES_PRINT":63,"RES_PRINTLN":64,"LISTA_EXPR":65,"+":66,"-":67,"*":68,"/":69,"<=":70,"==":71,"!=":72,">":73,">=":74,"<":75,"&&":76,"||":77,"!":78,"NUMERO":79,"DECIMAL":80,"CADENA_TEXTO":81,"CHAR":82,"RES_TRUE":83,"RES_FALSE":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RES_PUBLIC",8:"RES_CLASS",9:"ID",10:"{",12:"}",13:"RES_INTERFACE",16:"RES_VOID",17:"(",18:")",19:";",24:"RES_STATIC",25:"RES_MAIN",26:"RES_STRING",27:"[",28:"]",32:",",34:"=",37:"RES_INT",38:"RES_CHAR",39:"RES_DOUBLE",40:"RES_BOOLEAN",49:"RES_CONTINUE",50:"RES_BREAK",51:"RES_RETURN",53:"RES_IF",54:"RES_ELSE",55:"RES_WHILE",56:"RES_DO",57:"RES_FOR",58:"++",59:"--",60:"RES_SYSTEM",61:".",62:"RES_OUT",63:"RES_PRINT",64:"RES_PRINTLN",66:"+",67:"-",68:"*",69:"/",70:"<=",71:"==",72:"!=",73:">",74:">=",75:"<",76:"&&",77:"||",78:"!",79:"NUMERO",80:"DECIMAL",81:"CADENA_TEXTO",82:"CHAR",83:"RES_TRUE",84:"RES_FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[6,6],[6,5],[6,1],[14,2],[14,1],[15,6],[15,7],[15,6],[15,7],[15,1],[11,2],[11,1],[22,6],[22,7],[22,6],[22,7],[22,11],[22,2],[22,1],[22,1],[22,1],[20,3],[20,1],[33,2],[31,4],[30,3],[30,5],[36,3],[36,1],[21,1],[21,1],[21,1],[21,1],[21,1],[23,3],[23,2],[41,2],[41,1],[41,4],[41,3],[43,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[42,2],[42,2],[42,3],[42,2],[42,1],[44,5],[44,7],[44,7],[46,5],[47,7],[45,8],[45,8],[52,2],[52,2],[48,9],[48,9],[29,3],[29,4],[65,3],[65,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3],[35,1],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 9: case 16: case 42:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 10: case 17: case 28: case 34: case 43: case 74:
this.$=[$$[$0]];
break;
case 4:
this.$=API.nuevaClase($$[$0-3],$$[$0-1]);
break;
case 5:
this.$=API.nuevaClase($$[$0-2],[]);
break;
case 6:
this.$=API.nuevaInterfaz($$[$0-3],$$[$0-1]);
break;
case 7:
this.$=API.nuevaInterfaz($$[$0-2],[]);
break;
case 8: case 15: case 26: case 100:
let nuevoError=contador.toString()+'. ERROR SINTÁCTICO: Se ha obtenido un error de sintaxis: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;errores.push(nuevoError+"\n");
break;
case 11:
this.$=API.nuevaDefVoid($$[$0-3]);
break;
case 12:
this.$=API.nuevaDefVoidParametrizado($$[$0-4],$$[$0-2]);
break;
case 13:
this.$=API.nuevaDefMetodo($$[$0-4],$$[$0-3]);
break;
case 14:
this.$=API.nuevaDefMetodoParametrizado($$[$0-5],$$[$0-4],$$[$0-2]);
break;
case 18:
this.$=API.nuevoVoid($$[$0-3],$$[$0]);
break;
case 19:
this.$=API.nuevoVoidParametrizado($$[$0-4],$$[$0-2],$$[$0]);
break;
case 20:
this.$=API.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0]);
break;
case 21:
this.$=API.nuevoMetodoParametrizado($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 22:
this.$=API.nuevoMain($$[$0-2],$$[$0]);
break;
case 24: case 25: case 35: case 36: case 37: case 38: case 39: case 47: case 48: case 49: case 50: case 51: case 52: case 53:
this.$=$$[$0];
break;
case 27: case 33: case 73:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 29:
this.$=API.nuevoParametro($$[$0-1],$$[$0]);
break;
case 30:
this.$=API.nuevaAsignacion($$[$0-3],$$[$0-1]);
break;
case 31:
this.$=API.nuevaDeclaracion($$[$0-2],$$[$0-1]);
break;
case 32:
this.$=API.nuevaDeclaracionExp($$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 40: case 58:
this.$=$$[$0-1];
break;
case 41:
this.$=[];
break;
case 44:
$$[$0-3].push($$[$0-2]);this.$=$$[$0-3];
break;
case 45:
this.$=[$$[$0-2]];
break;
case 46:

    if($$[$0]!=';' && !modoPanico){
			let row = this._$.first_line;
			let column = this._$.first_column + 1;
			let newError = contador.toString() + ". Se esperaba el inicio de una instrucción valida pero se obtuvo \"" + $$[$0] + "\" en la línea "+row+", columna "+column+".\n";
			contador+=1;
			errores.push(newError);
			modoPanico = true;
        }
		else if($$[$0]==';'){
			modoPanico = false;
		}

break;
case 54:
this.$=API.nuevoContinue(this._$first_line,this.$first_column+1);
break;
case 55:
this.$=API.nuevoBreak(this._$first_line,this.$first_column+1);
break;
case 56:
this.$=API.nuevoReturn(null,this._$first_line,this.$first_column+1);
break;
case 57:
this.$=API.nuevoContinue($$[$0-1],this._$first_line,this.$first_column+1);
break;
case 60:
this.$=API.nuevoIf($$[$0-2],$$[$0],[]);
break;
case 61:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],$$[$0]);
break;
case 62:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],[$$[$0]]);
break;
case 63:
this.$=API.nuevoWhile($$[$0-2],$$[$0]);
break;
case 64:
this.$=API.nuevoDoWhile($$[$0-5],$$[$0-2]);
break;
case 65: case 66:
this.$=API.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 67:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.INCREMENTO);
break;
case 68:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.DECREMENTO);
break;
case 69:
 this.$ = API.nuevoPrint($$[$0-2]); 
break;
case 70:
 this.$ = API.nuevoPrintLn($$[$0-2]); 
break;
case 71:
this.$=API.nuevaLlamadaFuncion($$[$0-2],[]);
break;
case 72:
this.$=API.nuevaLlamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 75:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 76:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 77:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION);
break;
case 78:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION);
break;
case 79:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 80:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 81:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 82:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 83:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 84:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 85:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 86:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 87:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 88:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 89:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 90:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 91:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 92:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.NUMERO); 
break;
case 93:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.DECIMAL); 
break;
case 94:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.STRING); 
break;
case 95:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.CHAR); 
break;
case 96:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 97:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 98:
 this.$ = $$[$0-1]; 
break;
case 99:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],13:[1,9]},o($V2,[2,8]),{1:[2,1]},o($V2,[2,2]),{9:[1,10]},{9:[1,11]},{10:[1,12]},{10:[1,13]},{2:$V3,7:$V4,9:$V5,11:14,12:[1,15],21:23,22:16,26:$V6,29:18,30:19,31:20,37:$V7,38:$V8,39:$V9,40:$Va},{2:$Vb,7:$Vc,12:[1,30],14:29,15:31},{2:$V3,7:$V4,9:$V5,12:[1,34],21:23,22:35,26:$V6,29:18,30:19,31:20,37:$V7,38:$V8,39:$V9,40:$Va},o($V2,[2,5]),o($Vd,[2,17]),{16:[1,36],21:37,24:[1,38],26:$V6,37:$V7,38:$V8,39:$V9,40:$Va},{19:[1,39]},o($Vd,[2,24]),o($Vd,[2,25]),o($Vd,[2,26]),{17:$Ve,34:$Vf},{9:[1,43],36:42},{9:[2,35]},{9:[2,36]},{9:[2,37]},{9:[2,38]},{9:[2,39]},{2:$Vb,7:$Vc,12:[1,44],15:45},o($V2,[2,7]),o($Vg,[2,10]),{16:[1,46],21:47,26:$V6,37:$V7,38:$V8,39:$V9,40:$Va},o($Vg,[2,15]),o($V2,[2,4]),o($Vd,[2,16]),{9:[1,48]},{9:[1,49]},{16:[1,50]},o($Vd,[2,23]),{2:$Vh,9:$Vi,17:$Vj,18:[1,51],29:64,35:53,65:52,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:66,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{19:[1,67],32:[1,69],34:[1,68]},o($Vs,[2,34]),o($V2,[2,6]),o($Vg,[2,9]),{9:[1,70]},{9:[1,71]},{17:[1,72]},{17:[1,73]},{25:[1,74]},o($Vt,[2,71]),{18:[1,75],32:[1,76]},o($Vu,[2,74],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),{2:$Vh,9:$Vi,17:$Vj,29:64,35:91,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:92,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vt,[2,91],{17:$Ve}),o($Vt,[2,92]),o($Vt,[2,93]),o($Vt,[2,94]),o($Vt,[2,95]),o($Vt,[2,96]),o($Vt,[2,97]),{2:$Vh,9:$Vi,17:$Vj,29:64,35:93,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vt,[2,99]),o($Vt,[2,100]),{19:[1,94],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($VJ,[2,31]),{2:$Vh,9:$Vi,17:$Vj,29:64,35:95,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{9:[1,96]},{17:[1,97]},{17:[1,98]},{18:[1,99],20:100,21:102,26:$V6,33:101,37:$V7,38:$V8,39:$V9,40:$Va},{18:[1,103],20:104,21:102,26:$V6,33:101,37:$V7,38:$V8,39:$V9,40:$Va},{17:[1,105]},o($Vt,[2,72]),{2:$Vh,9:$Vi,17:$Vj,29:64,35:106,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:107,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:108,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:109,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:110,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:111,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:112,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:113,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:114,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:115,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:116,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:117,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:118,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($Vt,[2,87]),o($Vt,[2,88]),o($Vt,[2,89]),o($Vt,[2,90]),{18:[1,119],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($VJ,[2,30]),{19:[1,120],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($Vs,[2,33]),{18:[1,121],20:122,21:102,26:$V6,33:101,37:$V7,38:$V8,39:$V9,40:$Va},{18:[1,123],20:124,21:102,26:$V6,33:101,37:$V7,38:$V8,39:$V9,40:$Va},{10:$VK,23:125},{18:[1,127],32:$VL},o($Vu,[2,28]),{9:[1,129]},{10:$VK,23:130},{18:[1,131],32:$VL},{26:[1,132]},o($Vu,[2,73],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($VM,[2,75],{58:$Vv,59:$Vw,68:$Vz,69:$VA}),o($VM,[2,76],{58:$Vv,59:$Vw,68:$Vz,69:$VA}),o($VN,[2,77],{58:$Vv,59:$Vw}),o($VN,[2,78],{58:$Vv,59:$Vw}),o($VO,[2,79],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA}),o($VP,[2,80],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,73:$VE,74:$VF,75:$VG}),o($VP,[2,81],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,73:$VE,74:$VF,75:$VG}),o($VO,[2,82],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA}),o($VO,[2,83],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA}),o($VO,[2,84],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA}),o([18,19,32,76,77],[2,85],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o([18,19,32,77],[2,86],{58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vt,[2,98]),o($VJ,[2,32]),{19:[1,133]},{18:[1,134],32:$VL},{19:[1,135]},{18:[1,136],32:$VL},o($Vd,[2,18]),{9:$VQ,12:[1,138],21:23,26:$V6,29:150,30:140,31:141,37:$V7,38:$V8,39:$V9,40:$Va,41:137,42:139,44:142,45:143,46:144,47:145,48:146,49:$VR,50:$VS,51:$VT,52:151,53:$VU,55:$VV,56:$VW,57:$VX,60:$VY},{10:$VK,23:158},{21:102,26:$V6,33:159,37:$V7,38:$V8,39:$V9,40:$Va},o($Vu,[2,29]),o($Vd,[2,20]),{10:$VK,23:160},{27:[1,161]},o($Vg,[2,11]),{19:[1,162]},o($Vg,[2,13]),{19:[1,163]},{9:$VQ,12:[1,164],21:23,26:$V6,29:150,30:140,31:141,37:$V7,38:$V8,39:$V9,40:$Va,42:165,44:142,45:143,46:144,47:145,48:146,49:$VR,50:$VS,51:$VT,52:151,53:$VU,55:$VV,56:$VW,57:$VX,60:$VY},o($VZ,[2,41]),o($V_,[2,43],{43:166,2:$V$}),o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,49]),o($V01,[2,50]),o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),{19:[1,168]},{19:[1,169]},{2:$Vh,9:$Vi,17:$Vj,19:[1,170],29:64,35:171,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{19:[1,172]},o($V01,[2,59]),{17:$Ve,34:$Vf,58:$V11,59:$V21},{17:[1,175]},{17:[1,176]},{17:[1,177]},{10:$VK,23:178},{61:[1,179]},o($Vd,[2,19]),o($Vu,[2,27]),o($Vd,[2,21]),{28:[1,180]},o($Vg,[2,12]),o($Vg,[2,14]),o($VZ,[2,40]),o($V_,[2,42],{43:181,2:$V$}),{19:[1,182]},{19:[2,46]},o($V01,[2,54]),o($V01,[2,55]),o($V01,[2,56]),{19:[1,183],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($V01,[2,58]),o($V31,[2,67]),o($V31,[2,68]),{2:$Vh,9:$Vi,17:$Vj,29:64,35:184,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{9:[1,187],21:23,26:$V6,30:185,31:186,37:$V7,38:$V8,39:$V9,40:$Va},{2:$Vh,9:$Vi,17:$Vj,29:64,35:188,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{55:[1,189]},{62:[1,190]},{9:[1,191]},{19:[1,192]},o($V_,[2,45]),o($V01,[2,57]),{18:[1,193],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{2:$Vh,9:$Vi,17:$Vj,29:64,35:194,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:195,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{34:$Vf},{18:[1,196],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{17:[1,197]},{61:[1,198]},{18:[1,199]},o($V_,[2,44]),{10:$VK,23:200},{19:[1,201],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{19:[1,202],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{10:$VK,23:203},{2:$Vh,9:$Vi,17:$Vj,29:64,35:204,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{63:[1,205],64:[1,206]},{10:$VK,23:207},o($V01,[2,60],{54:[1,208]}),{9:$V41,52:209},{9:$V41,52:211},o($V01,[2,63]),{18:[1,212],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{17:[1,213]},{17:[1,214]},o($Vd,[2,22]),{10:$VK,23:215,44:216,53:$VU},{18:[1,217]},{58:$V11,59:$V21},{18:[1,218]},{19:[1,219]},{2:$Vh,9:$Vi,17:$Vj,29:64,35:220,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{2:$Vh,9:$Vi,17:$Vj,29:64,35:221,67:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($V01,[2,61]),o($V01,[2,62]),{10:$VK,23:222},{10:$VK,23:223},o($V01,[2,64]),{18:[1,224],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{18:[1,225],58:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($V01,[2,65]),o($V01,[2,66]),{19:[1,226]},{19:[1,227]},o($V01,[2,69]),o($V01,[2,70])],
defaultActions: {6:[2,1],24:[2,35],25:[2,36],26:[2,37],27:[2,38],28:[2,39],167:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let modoPanico = false,
    contador = 1,
    contadorTokens=1,
    errores = new Array();
    listaTokens = new Array();
module.exports.errores = errores;
module.exports.listaTokens = listaTokens;
exports.vaciar = function () { listaTokens=[];contador=1; };

const TIPO_OPERACION=require('./instructions').TIPO_OPERACION;
const TIPO_VALOR=require('./instructions').TIPO_VALOR;
const API=require('./instructions').INSTRUCCIONES_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR COMENTARIOS */
break;
case 1:/* IGNORAR COMENTARIOS */
break;
case 2:// IGNORAR ESPACIOS EN BLANCO
break;
case 3:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PUBLIC</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 7;
break;
case 4:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CLASS</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 8;
break;
case 5:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_INTERFACE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 13;
break;
case 6:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_INT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 37;
break;
case 7:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_BOOLEAN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 40;
break;
case 8:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_DOUBLE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 39;
break;
case 9:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_STRING</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 26;
break;
case 10:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CHAR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 38;
break;
case 11:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_TRUE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 83;
break;
case 12:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_FALSE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 84;
break;
case 13:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_STATIC</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 24;
break;
case 14:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_VOID</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 16;
break;
case 15:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_MAIN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 25;
break;
case 16:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_FOR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 57;
break;
case 17:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_WHILE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 55;
break;
case 18:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_SYSTEM</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 60;
break;
case 19:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_OUT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 62;
break;
case 20:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PRINTLN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 64;
break;
case 21:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PRINT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 63;
break;
case 22:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_DO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 56;
break;
case 23:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_IF</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 53;
break;
case 24:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_ELSE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 54;
break;
case 25:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_BREAK</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 50;
break;
case 26:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CONTINUE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 49;
break;
case 27:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_RETURN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 51;
break;
case 28:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_AND</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 'RES_AND';
break;
case 29:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_OR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 'RES_OR';
break;
case 30:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_NOT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 'RES_NOT';
break;
case 31:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_XOR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 'RES_XOR'
break;
case 32:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>>=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 74;
break;
case 33:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td><=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 70;
break;
case 34:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>></td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 73;
break;
case 35:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td><</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 75;
break;
case 36:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>==</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 71;
break;
case 37:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>!=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 72;
break;
case 38:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>.</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 61;
break;
case 39:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>;</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 19;
break;
case 40:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>,</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 32;
break;
case 41:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>(</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 17;
break;
case 42:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>)</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 18;
break;
case 43:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>[</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 27;
break;
case 44:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>]</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 28;
break;
case 45:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>{</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 10;
break;
case 46:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>}</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 12;
break;
case 47:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>++</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 58;
break;
case 48:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>--</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 59;
break;
case 49:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>+</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 66;
break;
case 50:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>-</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 67;
break;
case 51:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>*</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 68;
break;
case 52:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>/</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 69;
break;
case 53:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 34;
break;
case 54:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>DECIMAL</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 80;
break;
case 55:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>NUMERO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 79;
break;
case 56:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>ID</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 9;
break;
case 57:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>CHAR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 82;
break;
case 58:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>CADENA_TEXTO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 81;
break;
case 59:return 5;
break;
case 60:
    let fila=yy_.yylloc.first_line;
    let columna=yy_.yylloc.first_column+1;
    let nuevoError= contador.toString() + ". ERROR LÉXICO: El caracter \"" + yy_.yytext + "\" no pertenece al lenguaje, en la línea "+fila+", columna "+columna+".\n";
	contador+=1;
	errores.push(nuevoError);

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\s+)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:(([0-9]+)(\.([0-9]+))))/,/^(?:([0-9]+))/,/^(?:(([a-zA-ZnÑ_])[a-zA-Z0-9ñÑ_]*))/,/^(?:((\.)))/,/^(?:(("[^"]*")))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}