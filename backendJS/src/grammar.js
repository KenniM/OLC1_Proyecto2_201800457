/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,23],$V4=[1,17],$V5=[1,29],$V6=[1,18],$V7=[1,25],$V8=[1,24],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,37],$Vd=[1,34],$Ve=[1,35],$Vf=[2,7,9,12,16,26,42,43,44,45],$Vg=[1,50],$Vh=[1,51],$Vi=[2,7,12,16,26,42,43,44,45],$Vj=[19,32,34],$Vk=[2,45],$Vl=[19,32],$Vm=[1,71],$Vn=[1,78],$Vo=[1,70],$Vp=[1,69],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[2,7,9,12,16,17,26,42,43,44,45,54,55,56,58,60,61,62,65,72,84,85,86,87,88,89,90],$Vx=[1,95],$Vy=[18,19,32,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83],$Vz=[18,32],$VA=[1,112],$VB=[1,113],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,130],$VQ=[1,132],$VR=[1,179],$VS=[1,174],$VT=[1,175],$VU=[1,176],$VV=[1,180],$VW=[1,182],$VX=[1,183],$VY=[1,181],$VZ=[1,184],$V_=[18,19,32,71,72,75,76,77,78,79,80,81,82],$V$=[18,19,32,71,72,73,74,75,76,77,78,79,80,81,82],$V01=[18,19,32,75,76,77,78,79,80,81,82],$V11=[18,19,32,76,77,81,82],$V21=[2,7,9,12,16,26,42,43,44,45,54,55,56,58,59,60,61,62,65],$V31=[9,12,26,42,43,44,45,54,55,56,58,60,61,62,65],$V41=[1,201],$V51=[2,9,12,26,42,43,44,45,54,55,56,58,60,61,62,65],$V61=[1,207],$V71=[1,208],$V81=[2,9,12,18,26,42,43,44,45,54,55,56,58,60,61,62,65],$V91=[1,246];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SET_INSTRUCCIONES":4,"EOF":5,"DEFINICION_CLASE":6,"RES_PUBLIC":7,"RES_CLASS":8,"ID":9,"{":10,"INSTRUCCIONES_CLASE":11,"}":12,"RES_INTERFACE":13,"DEFINICIONES_INTERFAZ":14,"DEFINICION_INTERFAZ":15,"RES_VOID":16,"(":17,")":18,";":19,"LISTA_PARAM":20,"TIPO":21,"INSTRUCCION_CLASE":22,"BLOQUE_INSTRUCCIONES":23,"RES_STATIC":24,"RES_MAIN":25,"RES_STRING":26,"[":27,"]":28,"LLAMADA_FUNCION":29,"DECLARACION":30,"ASIGNACION":31,",":32,"PARAMETRO":33,"=":34,"EXPRESION":35,"DECLARACIONES":36,"DECLARADORES":37,"DECLARADOR":38,"ID_VAR":39,"INCIALIZADOR":40,"LISTA_ID":41,"RES_INT":42,"RES_CHAR":43,"RES_DOUBLE":44,"RES_BOOLEAN":45,"INSTRUCCIONES":46,"INSTRUCCION":47,"ERROR_INSTRUCCIONES":48,"IF":49,"FOR":50,"WHILE":51,"DO":52,"PRINT":53,"RES_CONTINUE":54,"RES_BREAK":55,"RES_RETURN":56,"INCR_DECR":57,"RES_IF":58,"RES_ELSE":59,"RES_WHILE":60,"RES_DO":61,"RES_FOR":62,"++":63,"--":64,"RES_SYSTEM":65,".":66,"RES_OUT":67,"RES_PRINT":68,"RES_PRINTLN":69,"LISTA_EXPR":70,"+":71,"-":72,"*":73,"/":74,"<=":75,"==":76,"!=":77,">":78,">=":79,"<":80,"&&":81,"||":82,"^":83,"!":84,"NUMERO":85,"DECIMAL":86,"CADENA_TEXTO":87,"CHAR":88,"RES_TRUE":89,"RES_FALSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RES_PUBLIC",8:"RES_CLASS",9:"ID",10:"{",12:"}",13:"RES_INTERFACE",16:"RES_VOID",17:"(",18:")",19:";",24:"RES_STATIC",25:"RES_MAIN",26:"RES_STRING",27:"[",28:"]",32:",",34:"=",42:"RES_INT",43:"RES_CHAR",44:"RES_DOUBLE",45:"RES_BOOLEAN",54:"RES_CONTINUE",55:"RES_BREAK",56:"RES_RETURN",58:"RES_IF",59:"RES_ELSE",60:"RES_WHILE",61:"RES_DO",62:"RES_FOR",63:"++",64:"--",65:"RES_SYSTEM",66:".",67:"RES_OUT",68:"RES_PRINT",69:"RES_PRINTLN",71:"+",72:"-",73:"*",74:"/",75:"<=",76:"==",77:"!=",78:">",79:">=",80:"<",81:"&&",82:"||",83:"^",84:"!",85:"NUMERO",86:"DECIMAL",87:"CADENA_TEXTO",88:"CHAR",89:"RES_TRUE",90:"RES_FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[6,6],[6,5],[6,1],[14,2],[14,1],[15,6],[15,7],[15,6],[15,7],[15,5],[15,6],[15,5],[15,6],[15,1],[11,2],[11,1],[22,6],[22,7],[22,6],[22,7],[22,5],[22,6],[22,5],[22,6],[22,11],[22,2],[22,1],[22,1],[22,1],[20,3],[20,1],[33,2],[31,4],[30,2],[36,2],[37,1],[37,3],[38,1],[38,1],[39,1],[40,3],[41,3],[41,1],[21,1],[21,1],[21,1],[21,1],[21,1],[23,3],[23,2],[46,2],[46,1],[46,4],[46,3],[48,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,2],[47,2],[47,2],[47,3],[47,2],[47,1],[49,5],[49,7],[49,7],[51,5],[52,7],[50,8],[50,8],[57,2],[57,2],[53,9],[53,9],[29,3],[29,4],[70,3],[70,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 9: case 20: case 56:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 10: case 21: case 36: case 41: case 48: case 57: case 88:
this.$=[$$[$0]];
break;
case 4:
this.$=API.nuevaClase($$[$0-3],$$[$0-1]);
break;
case 5:
this.$=API.nuevaClase($$[$0-2],[]);
break;
case 6:
this.$=API.nuevaInterfaz($$[$0-3],$$[$0-1]);
break;
case 7:
this.$=API.nuevaInterfaz($$[$0-2],[]);
break;
case 8:
var nuevoError=contador.toString()+'. ERROR SINTÁCTICO: Se ha obtenido un error de sintaxis: ' + yytext + ', se esperaba una declaración de clase o interfaz, en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;errores.push(nuevoError+"\n");contador++;
break;
case 11: case 15:
this.$=API.nuevaDefVoid($$[$0-3]);
break;
case 12: case 16:
this.$=API.nuevaDefVoidParametrizado($$[$0-4],$$[$0-2]);
break;
case 13: case 17:
this.$=API.nuevaDefMetodo($$[$0-4],$$[$0-3]);
break;
case 14: case 18:
this.$=API.nuevaDefMetodoParametrizado($$[$0-5],$$[$0-4],$$[$0-2]);
break;
case 19:
var nuevoError=contador.toString()+'. ERROR SINTÁCTICO: Se ha obtenido un error de sintaxis: ' + yytext + ', se esperaba la declaración de un método, en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;errores.push(nuevoError+"\n");contador++;
break;
case 22: case 26:
this.$=API.nuevoVoid($$[$0-3],$$[$0]);
break;
case 23: case 27:
this.$=API.nuevoVoidParametrizado($$[$0-4],$$[$0-2],$$[$0]);
break;
case 24: case 28:
this.$=API.nuevoMetodo($$[$0-4],$$[$0-3],$$[$0]);
break;
case 25: case 29:
this.$=API.nuevoMetodoParametrizado($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 30:
this.$=API.nuevoMain($$[$0-2],$$[$0]);
break;
case 32: case 33: case 44: case 45: case 49: case 50: case 51: case 52: case 53: case 61: case 62: case 63: case 64: case 65: case 66: case 67:
this.$=$$[$0];
break;
case 34:
var nuevoError=contador.toString()+'. ERROR SINTÁCTICO: Se ha obtenido un error de sintaxis: ' + yytext + ', se esperaba:declaración de método o función, declaración, asignación o llamada a una función, en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column;errores.push(nuevoError+"\n");contador++;
break;
case 35: case 42: case 47: case 87:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 37:
this.$=API.nuevoParametro($$[$0-1],$$[$0]);
break;
case 38:
this.$=API.nuevaAsignacion($$[$0-3],$$[$0-1]);
break;
case 39:
this.$=$$[$0-1];/*this.$=API.nuevaDeclaracion($$[$0-1],$$[$0]);*/
break;
case 40:
this.$=API.nuevaDeclaracion($$[$0-1],$$[$0]);
break;
case 43:
this.$=API.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR);
break;
case 46:
this.$=API.nuevaAsignacion($$[$0-2],$$[$0]);
break;
case 54: case 72:
this.$=$$[$0-1];
break;
case 55:
this.$=[];
break;
case 58:
$$[$0-3].push($$[$0-2]);this.$=$$[$0-3];
break;
case 59:
this.$=[$$[$0-2]];
break;
case 60:

    if($$[$0]!=';' && !modoPanico){
			let row = this._$.first_line;
			let column = this._$.first_column + 1;
			var newError = contador.toString() + ". Se esperaba el inicio de una instrucción valida pero se obtuvo \"" + $$[$0] + "\" en la línea "+row+", columna "+column+".\n";
			contador+=1;
			errores.push(newError);
			modoPanico = true;
        }
		else if($$[$0]==';'){
			modoPanico = false;
		}

break;
case 68:
this.$=API.nuevoContinue(this._$first_line,this.$first_column+1);
break;
case 69:
this.$=API.nuevoBreak(this._$first_line,this.$first_column+1);
break;
case 70:
this.$=API.nuevoReturn(null,this._$first_line,this.$first_column+1);
break;
case 71:
this.$=API.nuevoContinue($$[$0-1],this._$first_line,this.$first_column+1);
break;
case 74:
this.$=API.nuevoIf($$[$0-2],$$[$0],[]);
break;
case 75:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],$$[$0]);
break;
case 76:
this.$=API.nuevoIf($$[$0-4],$$[$0-2],[$$[$0]]);
break;
case 77:
this.$=API.nuevoWhile($$[$0-2],$$[$0]);
break;
case 78:
this.$=API.nuevoDoWhile($$[$0-5],$$[$0-2]);
break;
case 79: case 80:
this.$=API.nuevoFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 81:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.INCREMENTO);
break;
case 82:
this.$=API.nuevaOperUnitaria($$[$0-1],TIPO_OPERACION.DECREMENTO);
break;
case 83:
 this.$ = API.nuevoPrint($$[$0-2]); 
break;
case 84:
 this.$ = API.nuevoPrintLn($$[$0-2]); 
break;
case 85:
this.$=API.nuevaLlamadaFuncion($$[$0-2],[]);
break;
case 86:
this.$=API.nuevaLlamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 89:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 90:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 91:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION);
break;
case 92:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION);
break;
case 93:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL_QUE); 
break;
case 94:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 95:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 96:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 97:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL_QUE); 
break;
case 98:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 99:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 100:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 101:
 this.$ = API.nuevaOperBinaria($$[$0-2], $$[$0], TIPO_OPERACION.XOR); 
break;
case 102:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.INCREMENTO); 
break;
case 103:
 this.$ = API.nuevaOperUnitaria($$[$0-1], TIPO_OPERACION.DECREMENTO); 
break;
case 104:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 105:
 this.$ = API.nuevaOperUnitaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 106:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 107:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.NUMERO); 
break;
case 108:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.DECIMAL); 
break;
case 109:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.STRING); 
break;
case 110:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.CHAR); 
break;
case 111:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 112:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 113:
 this.$ = $$[$0-1]; 
break;
case 114:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],13:[1,9]},o($V2,[2,8]),{1:[2,1]},o($V2,[2,2]),{9:[1,10]},{9:[1,11]},{10:[1,12]},{10:[1,13]},{2:$V3,7:$V4,9:$V5,11:14,12:[1,15],16:$V6,21:19,22:16,26:$V7,29:20,30:21,31:22,36:30,42:$V8,43:$V9,44:$Va,45:$Vb},{2:$Vc,7:$Vd,12:[1,32],14:31,15:33,16:$Ve,21:36,26:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},{2:$V3,7:$V4,9:$V5,12:[1,38],16:$V6,21:19,22:39,26:$V7,29:20,30:21,31:22,36:30,42:$V8,43:$V9,44:$Va,45:$Vb},o($V2,[2,5]),o($Vf,[2,21]),{16:[1,40],21:41,24:[1,42],26:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},{9:[1,43]},{9:[1,44],37:45,38:46,39:47,40:48},{19:[1,49]},o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{17:$Vg,34:$Vh},{19:[1,52]},{2:$Vc,7:$Vd,12:[1,53],15:54,16:$Ve,21:36,26:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},o($V2,[2,7]),o($Vi,[2,10]),{16:[1,55],21:56,26:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},{9:[1,57]},{9:[1,58]},o($Vi,[2,19]),o($V2,[2,4]),o($Vf,[2,20]),{9:[1,59]},{9:[1,60]},{16:[1,61]},{17:[1,62]},o($Vj,$Vk,{17:[1,63]}),{19:[2,40],32:[1,64]},o($Vl,[2,41]),o($Vl,[2,43],{34:[1,65]}),o($Vl,[2,44]),o($Vf,[2,31]),{9:$Vm,17:$Vn,18:[1,66],29:79,35:68,70:67,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:80,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($Vw,[2,39]),o($V2,[2,6]),o($Vi,[2,9]),{9:[1,81]},{9:[1,82]},{17:[1,83]},{17:[1,84]},{17:[1,85]},{17:[1,86]},{25:[1,87]},{18:[1,88],20:89,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{18:[1,92],20:93,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{9:$Vx,38:94,39:47,40:48},{9:$Vm,17:$Vn,29:79,35:96,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($Vy,[2,85]),{18:[1,97],32:[1,98]},o($Vz,[2,88],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{9:$Vm,17:$Vn,29:79,35:114,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:115,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($Vy,[2,106],{17:$Vg}),o($Vy,[2,107]),o($Vy,[2,108]),o($Vy,[2,109]),o($Vy,[2,110]),o($Vy,[2,111]),o($Vy,[2,112]),{9:$Vm,17:$Vn,29:79,35:116,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($Vy,[2,114]),{19:[1,117],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{17:[1,118]},{17:[1,119]},{18:[1,120],20:121,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{18:[1,122],20:123,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{18:[1,124],20:125,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{18:[1,126],20:127,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{17:[1,128]},{10:$VP,23:129},{18:[1,131],32:$VQ},o($Vz,[2,36]),{9:[1,133]},{10:$VP,23:134},{18:[1,135],32:$VQ},o($Vl,[2,42]),o($Vj,$Vk),o($Vl,[2,46],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vy,[2,86]),{9:$Vm,17:$Vn,29:79,35:136,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:137,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:138,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:139,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:140,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:141,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:142,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:143,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:144,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:145,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:146,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:147,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:148,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:149,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($Vy,[2,102]),o($Vy,[2,103]),o($Vy,[2,104]),o($Vy,[2,105]),{18:[1,150],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($Vw,[2,38]),{18:[1,151],20:152,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{18:[1,153],20:154,21:91,26:$V7,33:90,42:$V8,43:$V9,44:$Va,45:$Vb},{19:[1,155]},{18:[1,156],32:$VQ},{19:[1,157]},{18:[1,158],32:$VQ},{10:$VP,23:159},{18:[1,160],32:$VQ},{10:$VP,23:161},{18:[1,162],32:$VQ},{26:[1,163]},o($Vf,[2,26]),{9:$VR,12:[1,165],21:185,26:$V7,29:177,30:167,31:168,36:30,42:$V8,43:$V9,44:$Va,45:$Vb,46:164,47:166,49:169,50:170,51:171,52:172,53:173,54:$VS,55:$VT,56:$VU,57:178,58:$VV,60:$VW,61:$VX,62:$VY,65:$VZ},{10:$VP,23:186},{21:91,26:$V7,33:187,42:$V8,43:$V9,44:$Va,45:$Vb},o($Vz,[2,37]),o($Vf,[2,28]),{10:$VP,23:188},o($Vz,[2,87],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V_,[2,89],{63:$VA,64:$VB,73:$VE,74:$VF,83:$VO}),o($V_,[2,90],{63:$VA,64:$VB,73:$VE,74:$VF,83:$VO}),o($V$,[2,91],{63:$VA,64:$VB,83:$VO}),o($V$,[2,92],{63:$VA,64:$VB,83:$VO}),o($V01,[2,93],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,83:$VO}),o($V11,[2,94],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,78:$VJ,79:$VK,80:$VL,83:$VO}),o($V11,[2,95],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,78:$VJ,79:$VK,80:$VL,83:$VO}),o($V01,[2,96],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,83:$VO}),o($V01,[2,97],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,83:$VO}),o($V01,[2,98],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,83:$VO}),o([18,19,32,81,82],[2,99],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,83:$VO}),o([18,19,32,82],[2,100],{63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VO}),o([18,19,32,71,72,73,74,75,76,77,78,79,80,81,82,83],[2,101],{63:$VA,64:$VB}),o($Vy,[2,113]),{19:[1,189]},{18:[1,190],32:$VQ},{19:[1,191]},{18:[1,192],32:$VQ},o($Vi,[2,15]),{19:[1,193]},o($Vi,[2,17]),{19:[1,194]},o($Vf,[2,22]),{10:$VP,23:195},o($Vf,[2,24]),{10:$VP,23:196},{27:[1,197]},{9:$VR,12:[1,198],21:185,26:$V7,29:177,30:167,31:168,36:30,42:$V8,43:$V9,44:$Va,45:$Vb,47:199,49:169,50:170,51:171,52:172,53:173,54:$VS,55:$VT,56:$VU,57:178,58:$VV,60:$VW,61:$VX,62:$VY,65:$VZ},o($V21,[2,55]),o($V31,[2,57],{48:200,2:$V41}),o($V51,[2,61]),o($V51,[2,62]),o($V51,[2,63]),o($V51,[2,64]),o($V51,[2,65]),o($V51,[2,66]),o($V51,[2,67]),{19:[1,202]},{19:[1,203]},{9:$Vm,17:$Vn,19:[1,204],29:79,35:205,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{19:[1,206]},o($V51,[2,73]),{17:$Vg,34:$Vh,63:$V61,64:$V71},{17:[1,209]},{17:[1,210]},{17:[1,211]},{10:$VP,23:212},{66:[1,213]},{9:$Vx,37:45,38:46,39:47,40:48},o($Vf,[2,27]),o($Vz,[2,35]),o($Vf,[2,29]),o($Vi,[2,11]),{19:[1,214]},o($Vi,[2,13]),{19:[1,215]},o($Vi,[2,16]),o($Vi,[2,18]),o($Vf,[2,23]),o($Vf,[2,25]),{28:[1,216]},o($V21,[2,54]),o($V31,[2,56],{48:217,2:$V41}),{19:[1,218]},{19:[2,60]},o($V51,[2,68]),o($V51,[2,69]),o($V51,[2,70]),{19:[1,219],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($V51,[2,72]),o($V81,[2,81]),o($V81,[2,82]),{9:$Vm,17:$Vn,29:79,35:220,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:[1,223],21:185,26:$V7,30:221,31:222,36:30,42:$V8,43:$V9,44:$Va,45:$Vb},{9:$Vm,17:$Vn,29:79,35:224,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{60:[1,225]},{67:[1,226]},o($Vi,[2,12]),o($Vi,[2,14]),{9:[1,227]},{19:[1,228]},o($V31,[2,59]),o($V51,[2,71]),{18:[1,229],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{9:$Vm,17:$Vn,29:79,35:230,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:231,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{34:$Vh},{18:[1,232],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{17:[1,233]},{66:[1,234]},{18:[1,235]},o($V31,[2,58]),{10:$VP,23:236},{19:[1,237],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{19:[1,238],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{10:$VP,23:239},{9:$Vm,17:$Vn,29:79,35:240,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{68:[1,241],69:[1,242]},{10:$VP,23:243},o($V51,[2,74],{59:[1,244]}),{9:$V91,57:245},{9:$V91,57:247},o($V51,[2,77]),{18:[1,248],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{17:[1,249]},{17:[1,250]},o($Vf,[2,30]),{10:$VP,23:251,49:252,58:$VV},{18:[1,253]},{63:$V61,64:$V71},{18:[1,254]},{19:[1,255]},{9:$Vm,17:$Vn,29:79,35:256,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},{9:$Vm,17:$Vn,29:79,35:257,72:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt,89:$Vu,90:$Vv},o($V51,[2,75]),o($V51,[2,76]),{10:$VP,23:258},{10:$VP,23:259},o($V51,[2,78]),{18:[1,260],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{18:[1,261],63:$VA,64:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($V51,[2,79]),o($V51,[2,80]),{19:[1,262]},{19:[1,263]},o($V51,[2,83]),o($V51,[2,84])],
defaultActions: {6:[2,1],24:[2,49],25:[2,50],26:[2,51],27:[2,52],28:[2,53],201:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let modoPanico = false,
    contador = 1,
    contadorTokens=1,
    errores = new Array();
    listaTokens = new Array();
module.exports.errores = errores;
module.exports.listaTokens = listaTokens;
exports.vaciar = function () { listaTokens=[];contador=1; };

const TIPO_OPERACION=require('./instructions').TIPO_OPERACION;
const TIPO_VALOR=require('./instructions').TIPO_VALOR;
const API=require('./instructions').INSTRUCCIONES_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR COMENTARIOS */
break;
case 1:/* IGNORAR COMENTARIOS */
break;
case 2:// IGNORAR ESPACIOS EN BLANCO
break;
case 3:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PUBLIC</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 7;
break;
case 4:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CLASS</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 8;
break;
case 5:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_INTERFACE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 13;
break;
case 6:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_INT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 42;
break;
case 7:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_BOOLEAN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 45;
break;
case 8:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_DOUBLE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 44;
break;
case 9:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_STRING</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 26;
break;
case 10:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CHAR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 43;
break;
case 11:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_TRUE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 89;
break;
case 12:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_FALSE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 90;
break;
case 13:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_STATIC</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 24;
break;
case 14:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_VOID</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 16;
break;
case 15:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_MAIN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 25;
break;
case 16:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_FOR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 62;
break;
case 17:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_WHILE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 60;
break;
case 18:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_SYSTEM</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 65;
break;
case 19:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_OUT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 67;
break;
case 20:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PRINTLN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 69;
break;
case 21:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_PRINT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 68;
break;
case 22:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_DO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 61;
break;
case 23:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_IF</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 58;
break;
case 24:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_ELSE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 59;
break;
case 25:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_BREAK</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 55;
break;
case 26:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_CONTINUE</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 54;
break;
case 27:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_RETURN</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 56;
break;
case 28:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_AND</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 81;
break;
case 29:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_OR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 82;
break;
case 30:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_NOT</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 84;
break;
case 31:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>RES_XOR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 83
break;
case 32:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>>=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 79;
break;
case 33:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td><=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 75;
break;
case 34:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>></td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 78;
break;
case 35:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td><</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 80;
break;
case 36:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>==</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 76;
break;
case 37:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>!=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 77;
break;
case 38:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>.</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 66;
break;
case 39:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>;</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 19;
break;
case 40:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>,</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 32;
break;
case 41:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>(</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 17;
break;
case 42:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>)</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 18;
break;
case 43:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>[</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 27;
break;
case 44:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>]</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 28;
break;
case 45:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>{</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 10;
break;
case 46:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>}</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 12;
break;
case 47:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>++</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 63;
break;
case 48:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>--</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 64;
break;
case 49:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>+</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 71;
break;
case 50:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>-</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 72;
break;
case 51:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>*</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 73;
break;
case 52:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>/</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 74;
break;
case 53:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>=</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 34;
break;
case 54:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>DECIMAL</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 86;
break;
case 55:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>NUMERO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 85;
break;
case 56:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>ID</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 9;
break;
case 57:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>CHAR</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 88;
break;
case 58:listaTokens.push('<tr><th scope="row">'+contadorTokens.toString()+'</th><td>'+yy_.yylloc.first_line+'</td><td>'+(parseInt(yy_.yylloc.first_column)+1)+'</td><td>CADENA_TEXTO</td><td>'+yy_.yytext+'</td></tr>\n');contadorTokens++;return 87;
break;
case 59:return 5;
break;
case 60:
    let fila=yy_.yylloc.first_line;
    let columna=yy_.yylloc.first_column+1;
    let nuevoError= contador.toString() + ". ERROR LÉXICO: El caracter \"" + yy_.yytext + "\" no pertenece al lenguaje, en la línea "+fila+", columna "+columna+".\n";
	contador+=1;
	errores.push(nuevoError);

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\s+)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:(([0-9]+)(\.([0-9]+))))/,/^(?:([0-9]+))/,/^(?:(([a-zA-ZñÑ_])[a-zA-Z0-9ñÑ_]*))/,/^(?:('.'))/,/^(?:(("[^"]*")))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}